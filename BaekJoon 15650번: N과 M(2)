// DFS 알고리즘과 백트래킹을 활용하여 문제를 풀었습니다.

#include <stdio.h>
#include <iostream>
#include<math.h>
#include<algorithm>
#include<vector>
#include <string>
#include<map>

#pragma warning(disable:4996)
using namespace std;

int n, m;
vector<bool> check(8, 0);
vector<int>ans;
vector<int> arr;
void print()
{
    for (int i = 0; i < ans.size(); i++)
    {
        cout << ans[i] << " ";
    }
    cout << "\n";
}

void dfs(int cnt)
{
    if (cnt == m)
    {
        for (int j = 1; j < ans.size(); j++)
        {
            if (ans[j - 1] > ans[j])
            {
                return;
            }
        }
        print();
        return;
    }
    for (int i = 0; i < n;i++)
    {
        if (check[i] == true)
        {
            continue;
        }
        check[i] = true;
        ans.push_back(arr[i]);
        dfs(cnt + 1);
        ans.pop_back();
        check[i] = false;
    }
}

int main() {
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
    {
        arr.push_back(i);
    }
    dfs(0);
}
