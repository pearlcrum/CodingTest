#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

int n, m;
int arr[101][101];
bool visited[101][101];
int vx[4] = { 1,0,-1,0 };
int vy[4] = { 0,1,0,-1 };
int ans;
void bfs(int x, int y)
{
	queue<pair<int, pair<int, int>>> q;
	q.push({ 0,{0,1} });
	while (!q.empty())
	{
		int tx = q.front().first;
		int ty = q.front().second.first;
		int cnt = q.front().second.second;
		q.pop();
		if (tx == n - 1 && ty == m - 1)
		{
			ans = cnt;
			return;
		}
		if (visited[tx][ty])
			continue;
		visited[tx][ty] = true;
		for (int i = 0; i < 4; i++)
		{
			int bx = tx + vx[i];
			int by = ty + vy[i];
			if (bx < 0 || bx >= n || by < 0 || by >= m)
				continue;
			if (arr[bx][by] == 1 && visited[bx][by] == false)
			{
				q.push({ bx,{by,cnt + 1} });
			}

		}

	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < m; j++)
		{
			arr[i][j] = s[j] - '0';
		}
	}
	bfs(0,0);
	cout << ans;
}
	

-------------------------------------------------------------------------------------------

#include <iostream>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;

int n, m;
int input[101][101];
bool check[101][101];
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
pair<int, int> res;
queue<pair<pair<int,int>,int>> q;

int bfs(int x, int y)
{
	int cnt = 1;
	q.push( {{ x,y },1});
	check[x][y] = 1;
	
	while (!q.empty())
	{
		x = q.front().first.first;
		y = q.front().first.second;
		cnt = q.front().second;
		q.pop();
		if (x == n && y == m)
		{
			return cnt;
		}
		for (int i = 0; i < 4; i++)
		{
			int va = x + vx[i];
			int vb = y + vy[i];
			if (va<1 || va>n || vb<1 || vb>m)
			{
				continue;
			}
			if (input[va][vb] == 1&& !check[va][vb])
			{
				check[va][vb] = 1;
				q.push({ {va,vb },cnt + 1 });
			}
		}
	}
}


int main()
{
	cin.tie(0);
	cin >> n>> m;
	for (int i = 1; i <= n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < s.length(); j++)
		{
			input[i][j+1] = s[j] - '0';
		}
	}
	cout << bfs(1, 1);
}

//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <queue>
#include <cstring>
using namespace std;

int vx[4] = { 1,0,-1,0 };
int vy[4] = {0,-1,0,1};
int arr[101][101];
bool visited[101][101];
int n, m;
void bfs(int x, int y, int count)
{
	queue<pair<int, pair<int, int>>> q;
	visited[x][y] = true;
	q.push({ x,{y,count} });
	while (!q.empty())
	{
		int tempx = q.front().first;
		int tempy = q.front().second.first;
		int cnt = q.front().second.second;
		q.pop();
		if (tempx == n && tempy == m)
		{
			cout << cnt;
		}
		for (int i = 0; i < 4; i++)
		{
			int tx = tempx + vx[i];
			int ty = tempy + vy[i];
			if (tx < 1 || tx>n || ty<1 || ty>m)
				continue;
			if (visited[tx][ty])
				continue;
			if (arr[tx][ty] == 1)
			{
				visited[tx][ty] = true;
				q.push({ tx,{ty,cnt + 1} });
			}
		}
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < s.length(); j++)
		{
			arr[i][j + 1] = s[j] - '0';
		}
	}
	bfs(1,1,1);
}
