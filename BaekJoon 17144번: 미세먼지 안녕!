#include<iostream>
#include<algorithm>
using namespace std;

int r, c, t;
int arr[51][51];
int arr2[51][51];
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
int total_dust = 0;
void spread(int top, int bot)
{
	for (int i = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			if (arr[i][j] > 0)
			{
				int num = 0;
				int temp = arr[i][j];
				for (int p = 0; p < 4; p++)
				{
					int bx = i + vx[p];
					int by = j + vy[p];
					if (bx < 0 || by < 0 || bx >= r || by >= c)
						continue;
					if ((bx == top && by == 0) || (bx == bot && by == 0))
						continue;

					arr2[bx][by] = arr2[bx][by] + temp / 5;
					num++;
				}
				arr2[i][j] = arr2[i][j] - (temp / 5) * num;
			}
		}
	}
	for (int i = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			arr[i][j] = arr[i][j] + arr2[i][j];
			arr2[i][j] = 0;
		}
	}
}
void move(int top,int bot)
{
	total_dust = total_dust - arr[bot + 1][0];
	total_dust = total_dust - arr[top - 1][0];
	for (int i = top - 1; i > 0; i--)
		arr[i][0] = arr[i - 1][0];
	for (int i = 0; i < c - 1; i++)
		arr[0][i] = arr[0][i + 1];
	for (int i = 1; i <= top; i++)
		arr[i - 1][c - 1] = arr[i][c - 1];
	for (int i = c - 1; i > 1; i--)
		arr[top][i] = arr[top][i - 1];
	arr[top][1] = 0;
	for (int i = bot + 1; i < r - 1; i++)
		arr[i][0] = arr[i + 1][0];
	for (int i = 0; i < c - 1; i++)
		arr[r - 1][i] = arr[r - 1][i + 1];
	for (int i = r - 1; i >= bot; i--)
		arr[i][c - 1] = arr[i - 1][c - 1];
	for (int i = c - 1; i > 1; i--)
		arr[bot][i] = arr[bot][i - 1];
	arr[bot][1] = 0;

}
void refresh(int t)
{
	int top, bot;
	bool check = false;
	for (int i = 0; i < r; i++)
	{
		if (arr[i][0] == -1 && check == false)
		{
			top = i;
			check = true;
		}
		else if (arr[i][0] == -1 && check == true)
			bot = i;
	}
	for (int k = 0; k < t; k++)
	{
		spread(top,bot);
		move(top,bot);
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> r >> c >> t;
	for (int i = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			cin >> arr[i][j];
			if (arr[i][j] > 0)
				total_dust += arr[i][j];
		}
	}
	refresh(t);
	cout << total_dust;
}
