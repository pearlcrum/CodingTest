#include <string>
#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <math.h>
#include <map>
#define INF 987654321
using namespace std;

int n, m;
int arr[51][51];
//int c_arr[51][51];
//bool visited[51][51];
//bool visited2[51][51];
//bool visited3[51][51];
int visited[13];
vector<pair<int, int>> ones;
vector<pair<int, int>> twos;
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
int result = INF;
//void clearVisit()
//{
//	for (int i = 1; i <= n; i++)
//		for (int j = 1; j <= n; j++)
//			visited[i][j] = false;
//}
void search(vector<pair<int, int>> twos)
{
	int res = 0;
	for (int i = 0; i < ones.size(); i++)
	{
		int oneMin = INF;
		int oneX = ones[i].first;
		int oneY = ones[i].second;
		for (int j = 0; j < twos.size(); j++)
		{
			if (visited[j])
			{
				int a = abs(twos[j].first - oneX);
				int b = abs(twos[j].second - oneY);
				oneMin = min(oneMin, a + b);
			}
		}
		res += oneMin;

	}
	result = min(result, res);
}
//void bfs()
//{
//	int res = 0;
//
//	for(int i=1;i<=n;i++)
//		for(int j=1;j<=n;j++)
//			if (c_arr[i][j] == 1)
//			{
//				clearVisit();
//				queue<pair<int, pair<int, int>>> q;
//				q.push({ i,{j,0 } });
//				visited[i][j] = true;
//				while (!q.empty())
//				{
//					int nowX = q.front().first;
//					int nowY = q.front().second.first;
//					int cnt = q.front().second.second;
//					q.pop();
//					bool check = false;
//					for (int i = 0; i < 4; i++)
//					{
//						
//						int nextX = nowX + vx[i];
//						int nextY = nowY + vy[i];
//						if (nextX<1 || nextY<1 || nextX>n || nextY>n)
//							continue;
//						if ((c_arr[nextX][nextY] == 0||c_arr[nextX][nextY]==1) && !visited[nextX][nextY])
//						{
//							visited[nextX][nextY] = true;
//							q.push({ nextX,{nextY,cnt + 1} });
//						}
//						else if (c_arr[nextX][nextY] == 2 && !visited[nextX][nextY])
//						{
//							res += cnt+1;
//							check = true;
//							break;
//						}
//					}
//					if (check == true)
//						break;
//				}
//			}
//	result = min(result, res);
//
//}
//void makeZero()
//{
//	for (int i = 1; i <= n; i++)
//	{
//		for (int j = 1; j <= n; j++)
//		{
//			if (c_arr[i][j] == 2 && !visited2[i][j])
//			{
//				visited3[i][j] = true;
//				c_arr[i][j] = 0;
//			}
//		}
//	}
//}
//void makeTwo()
//{
//	for (int i = 1; i <= n; i++)
//	{
//		for (int j = 1; j <= n; j++)
//		{
//			if (c_arr[i][j] == 0 && visited3[i][j])
//			{
//				visited3[i][j] = false;
//				c_arr[i][j] = 2;
//			}
//		}
//	}
//}
void makeChicken(int idx,int cnt)
{
	if (cnt == m)
	{
		//makeZero();//c_arr의 나머지 2들을 0으로 만들자
		search(twos);
		//bfs();
		//makeTwo();//c_arr의 0으로 만들었던 나머지 것들 2로 다시 
		return;
	}
	if (idx == twos.size())
		return;

	visited[idx] = true;
	makeChicken(idx + 1, cnt + 1);
	visited[idx] = false;
	makeChicken(idx + 1, cnt);

	/*for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			if (c_arr[i][j] == 2 && !visited2[i][j])
			{
				visited2[i][j] = true;
				twos.push_back({ i,j });
				makeChicken(cnt + 1);
				twos.pop_back();
				visited2[i][j] = false;
			}
		}
	}*/

}
int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= n; j++)
		{
			cin >> arr[i][j];
			if (arr[i][j] == 1)
				ones.push_back({ i,j });
			if (arr[i][j] == 2)
				twos.push_back({ i,j });
		}
	/*vector<int> cntM;
	for (int i = 0; i < m; i++)
	{
		cntM.push_back(1);
	}
	for (int i = 0; i < twos.size() - m; i++)
	{
		cntM.push_back(0);
	}

	do
	{
		vector<pair<int, int>> temp;
		for (int i = 0; i < twos.size(); i++)
		{
			if (cntM[i] == 1)
				temp.push_back({ twos[i].first,twos[i].second });
		}
		search(temp);

	} while (next_permutation(twos.begin(), twos.end()));*/

	makeChicken(0,0);

	//for (int i = 1; i <= n; i++)
	//{
	//	for (int j = 1; j <= n; j++)
	//	{
	//		if (c_arr[i][j] == 2 && !visited2[i][j])
	//		{
	//			visited2[i][j] = true;
	//			twos.push_back({ i,j });
	//			makeChicken(1);
	//			twos.pop_back();
	//			//c_arr[i][j] = 0;
	//			visited2[i][j] = false;
	//		}
	//	}
	//}
	cout << result;
}
