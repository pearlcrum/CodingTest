#include <iostream>
#include <queue>
#include <algorithm>
#include <utility>

using namespace std;

int n, k;
int min0 = 100001;
bool check[100001];//같은 위치는 두번 계산할 필요 없도록
queue<pair<int, int>> q;
vector<int> arr(100001,0);
void bfs( )
{
	q.push({ k,0 });//동생의 위치를 집어 넣고
	check[k] = 1; // true 선언
	while (!q.empty())
	{
		int x = q.front().first;
		int cnt = q.front().second;
		
		q.pop();
		if (x == n) // 같은 경우
		{
			min0 = cnt;
			break;
		}
		else if (x > n && x < 100001 && x >= 0) //동생의 위치가 내 위치보다 클 경우
		{
			if (x % 2 == 0 && !check[x / 2]) // 나누기 2
			{
				q.push({ x / 2,cnt + 1 });
				check[x / 2] = 1;
				arr[x / 2]=x;
			}
			if (!check[x + 1])
			{
				q.push({ x + 1,cnt + 1 });
				check[x + 1] = 1;
				arr[x+1]=x;

			}
			if (!check[x - 1])
			{
				q.push({ x - 1,cnt + 1 });
				check[x - 1] = 1;
				arr[x-1]=x;

			}
		}
		else if (x < n)
		{
			if (!check[x + 1])
			{
				q.push({ x + 1,cnt + 1 });
				check[x + 1] = 1;
				arr[x+1]=x;

			}
		}
	}
	cout << min0;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> k;
	bfs();
	int	b = n;//5 담음
	cout << "\n";
	cout << n << " ";
	while (arr[b] != k)
	{
		if (arr[b] == 0)
			break;
		cout << arr[b] << " ";
		b = arr[b];
	}
	if (n != k)
	{
		cout << k;
	}
}
