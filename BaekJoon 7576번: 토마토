#include <iostream>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;
int arr[1001][1001];
int m, n;
int ans;
int tempx, tempy;
bool check[1001][1001];
int cnt;
queue<pair< pair< int, int>, int>> q;
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
int xxx;
int maxNum=0;
void bfs(int x, int y)
{
	check[x][y] = 1;
	q.push({ { x,y }, 0});
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (arr[i][j] == 1 &&!check[i][j])
			{
				check[i][j] = 1;
				q.push({ { i,j }, 0 });
			}
		}
	}
	while (!q.empty())
	{
		x = q.front().first.first;
		y = q.front().first.second;
		cnt = q.front().second;
		q.pop();
		if (cnt >= maxNum)
		{
			maxNum = cnt;
		}
		for (int i = 0; i < 4; i++)
		{
			int va = x + vx[i];
			int vb = y + vy[i];
			if (va < 0 || vb < 0 || va >= n || vb >= m)
			{
				continue;
			}
			if (arr[va][vb] == 0 && !check[va][vb])
			{
				check[va][vb] = 1;
				arr[va][vb] = 1;
				q.push({ {va,vb},cnt+1});
			}
			
		}
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (arr[i][j] == 0)
			{
				maxNum = -1;
			}
		}
	}
	cout << maxNum;
}
int main()
{
	cin.tie(0);
	cin >> m >> n;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> arr[i][j];
			if (arr[i][j] == 1 && !check[i][j])
			{
				xxx = 1;
				tempx = i;
				tempy = j;
			}
		}
	}
	if (xxx != 1)
	{
		cout << 0;
		return 0;
	}
	bfs(tempx, tempy);

}
