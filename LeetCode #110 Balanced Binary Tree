/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#include<queue>

class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(root==nullptr)
            return true;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* node=q.front();
            q.pop();
            int left_len=calc_height(node->left);
            int right_len=calc_height(node->right);
            if(left_len-right_len<=1 && left_len-right_len>=-1)
            {
                if(node->left!=nullptr)
                    q.push(node->left);
                if(node->right!=nullptr)
                    q.push(node->right);
            }
            else
                return false;
        }
        return true;
    }
    
    int calc_height(TreeNode* root)
    {
        if(root==nullptr)
            return 0;

        int left_height=calc_height(root->left);
        int right_height=calc_height(root->right);
        if(left_height>right_height)
            return left_height+1;
        else
            return right_height+1;
    }
};
