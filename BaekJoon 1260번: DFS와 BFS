#include <stdio.h>
#include <iostream>
#include<math.h>
#include<algorithm>
#include<vector>
#include<cstring>
#include<map>
#include<stack>
#include<cstdio>
#include<functional>
#pragma warning(disable:4996)

using namespace std;


*/
//DFS 장점: 현 경로상의 노드를 기억하기 때문에 적은 메모리를 사용한다.
//DFS 장점: 찾으려는 노드가 깊은 단계에 있는 경우 BFS보다 빠르게 찾을 수 있다.
//DFS 단점: 해가 없는 경로를 탐색할 경우 단게가 끝날때까지 탐색한다. 최단 경로라는 보장이 존재하지 않는다.
//BFS 장점: 답이 되는 경로가 여러 개인 경우에도 최단경로임을 보장한다.
//BFS 장점: 최단 경로가 존재하면 깊이가 무한적으로 깊어져도 답을 찾을 수 있다.
//BFS 닩점: 경로가 길 경우에는 많은 기억 공간을 필요하게 되나.

int n, m, v;
int adjacent[1001][1001];
bool visited[1001];
queue<int> q;
void dfs(int v)
{
	visited[v] = 1;//방문했으니
	cout << v << " ";
	for (int i = 1; i <= n; i++)
	{
		if (adjacent[v][i] && !visited[i])
		{
			visited[i];
			dfs(i);
		}
	}
}
void bfs(int v)
{
	q.push(v);
	visited[v] = 1;

	while (!q.empty())
	{
		v = q.front();
		q.pop();

		cout << v << " ";

		for (int i = 1; i <= n; i++)
		{
			if (adjacent[v][i] && !visited[i])
			{
				visited[i] = 1;
				q.push(i);
			}
		}
	}

}
int main()
{
	
	cin.tie(0);
	
	cin >> n >> m >> v;
	for (int i = 1; i <= m; i++)
	{
		int a, b;
		cin >> a >> b;
		adjacent[a][b] = 1;
		adjacent[b][a] = 1;
	}

	dfs(v);
	cout << "\n";
	memset(visited, false, sizeof(visited));
	bfs(v);
}

