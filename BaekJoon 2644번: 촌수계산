#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
using namespace std;

int n;
int a, b;
int m;
int arr[101][101];
bool visited[101];
void bfs(int a, int b)
{
	queue<pair<int, int>> q;
	q.push({ a,0 });
	visited[a] = true;
	while (!q.empty())
	{
		int now = q.front().first;
		int cnt = q.front().second;
		q.pop();
		
		if (now == b)
		{
			cout << cnt;
			return;
		}
		for (int i = 1; i <= n; i++)
		{
			if (arr[now][i] == 1 && visited[i]==false)
			{
				q.push({ i,cnt + 1 });
				visited[i] = true;
			}
		}
	}
	cout << -1;
}
void dfs(int a, int b)
{
	stack<pair<int, int>> st;
	st.push({ a,0 });
	visited[a] = true;
	while (!st.empty())
	{
		int now = st.top().first;
		int cnt = st.top().second;
		st.pop();

		if (now == b)
		{
			cout << cnt;
			return;
		}
		for (int i = 1; i <= n; i++)
		{
			if (arr[now][i] == 1 && visited[i] == false)
			{
				st.push({ i,cnt + 1 });
				visited[i] = true;
			}
		}
	}
	cout << -1;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n;
	cin >> a >> b;
	cin >> m;
	int x, y;
	for (int i = 0; i < m; i++)
	{
		cin >> x >> y;
		arr[x][y] = 1;
		arr[y][x] = 1;
	}
	//bfs(a, b);
	dfs(a, b);
}
	
