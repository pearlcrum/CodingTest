#include <string>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
#include <unordered_map>
#include <math.h>
#include <stack>
using namespace std;
int n;
vector<long long> vec;
vector<long long> ans;
long long minAns = 123456789123456789;
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		int a; cin >> a;
		vec.push_back(a);
	}
	sort(vec.begin(), vec.end());
	int low = 0;
	int high = vec.size() - 1;
	while (low < high)
	{
		if (abs(vec[low] + vec[high]) < minAns)
		{
			minAns = abs(vec[low] + vec[high]);
			ans.clear();
			ans.push_back(vec[low]);
			ans.push_back(vec[high]);
		}
		if (vec[low] + vec[high] > 0)
			high--;
		else
			low++;
	}
	cout << ans[0] << " " << ans[1];
}
---------------------------------------------------------------------------------

#include <string>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
#include <map>
using namespace std;

int n;
vector<long long> vec;
vector<long long> answer;
int main()
{
    cin.tie(0);
    ios::sync_with_stdio(false);
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        int a; cin >> a; vec.push_back(a);
    }
    sort(vec.begin(), vec.end());
    long long minAns=123456789123456789;

    int left = 0;
    int right = vec.size() - 1;
    while (left < right)
    {
        long long sum = vec[left]+vec[right];
        if (sum==0)
        {
            answer.clear(); answer.push_back(vec[left]); answer.push_back(vec[right]);
            break;
        }
        else if (sum > 0)
        {
            if (abs(sum) < minAns)
            {
                minAns = abs(sum);
                answer.clear();
                answer.push_back(vec[left]); answer.push_back(vec[right]);
            }
            right--;
        }
        else
        {
            if (abs(sum) < minAns)
            {
                minAns = abs(sum);
                answer.clear();
                answer.push_back(vec[left]); answer.push_back(vec[right]);
            }
            left++;
        }
    }
    for (int i = 0; i < answer.size(); i++)
    {
        cout << answer[i] << " ";
    }
    
    
}
================================================
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int n;
vector<int> arr;
pair<int, int> pr;
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		int x;
		cin >> x;
		arr.push_back(x);
	}
	sort(arr.begin(), arr.end());
	
	int start = 0;
	int end = n - 1;
	long long val;

	int min = 2000000000; // 큰 값을 넣어두고
	long long res=arr[start]+arr[end];
	vector<int> answer(2);
	while (start < end)
	{
		val = (long long)arr[start]+(long long)arr[end]; //합을 val로 둔다.
		if (min > abs(val)) //0과 가까워지고 있으면
		{
			min = abs(val);
			answer[0] = arr[start];
			answer[1] = arr[end];
			if (val == 0)
				break;
		}
		if (val < 0)
		{
			start++;
		}
		else
		{
			end--;
		}
		
	}
	cout << answer[0] << " " << answer[1];
}
