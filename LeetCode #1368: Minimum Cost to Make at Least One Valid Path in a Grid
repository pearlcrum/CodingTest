#include<deque>
#define INF 100001
int vx[4] = { 0,0,1,-1 };
int vy[4] = { 1,-1,0,0 };
// 1은 우측으로 (0,1) 2는 좌측으로 (0,-1) 3은 아래로 (1,0) 4는 위로(-1,0)
int arr[101][101];
class Solution {
public:
    int minCost(vector<vector<int>>& grid) {

        int m = grid.size();// 행
        int n = grid[0].size();//열;

        deque<pair<int, int>>q;
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
                arr[i][j] = INF; //비용 초기화
        }
        q.push_back({ 0,0 });
        arr[0][0] = 0;
        
        while (!q.empty())
        {
            int x = q.front().first;
            int y = q.front().second;
            q.pop_front();


            for (int i = 0; i < 4; i++)
            {
                int tx = x + vx[i];
                int ty = y + vy[i];
                if (tx < 0 || tx >= m || ty < 0 || ty >= n)
                    continue; // grid 배열 밖으로 벗어날 경우

                int c = int(i != grid[x][y] - 1);
                
                if (arr[tx][ty] > arr[x][y] + c)
                {
                    arr[tx][ty] = arr[x][y] + c;
                    if (c == 0)
                        q.push_front({ tx,ty });
                    else
                        q.push_back({ tx,ty });
                }

            }

        }
        return arr[m - 1][n - 1];

    }
};

---------------------------------python file-----------------------
from collections import deque
class Solution:
    def minCost(self, grid: List[List[int]]) -> int:
        vx= [0,0,1,-1]
        vy= [1,-1,0,0]
       
        m= len(grid)
        n= len(grid[0])
        
        arr=[[0 for i in range(n)] for i in range(m)] # 2차원 배열 선언
        
        deq=deque()
        
        for i in range(m):
            for j in range(n):
                arr[i][j]=100001 #나올 수 없는 값 비용 초기화
        
        deq.append([0,0])
        arr[0][0]=0
        
        while deq:
            t=deq.popleft()
            x=t[0]
            y=t[1]
            
            for i in range (4):
                tx=x+vx[i]
                ty=y+vy[i]
                if tx<0 or tx>=m or ty<0 or ty>=n:
                    continue
                if i!= grid[x][y]-1:
                    c=1
                else:
                    c=0
                
                if arr[tx][ty]> arr[x][y]+c:
                    arr[tx][ty]=arr[x][y]+c
                    if c==0:
                        deq.appendleft([tx,ty])
                    else:
                        deq.append([tx,ty])
        
        return arr[m-1][n-1]

-------------------------------JAVA file-----------------------------
class Solution {
    private class Pair {
        public int x, y;
        public Pair(int x, int y) { this.x = x; this.y = y; }

    }
    public int minCost(int[][] grid) {
        
        int m =grid.length;
        int n= grid[0].length;
        int[][] arr= new int[101][101];
        int[] vx={0,0,1,-1};
        int[] vy={1,-1,0,0};
        
        Deque<Pair> deq = new ArrayDeque<>();
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
                arr[i][j]=100001;
        }
        Pair temp= new Pair(0,0);
        deq.addLast(temp);
        arr[0][0]=0;
        
        while(deq.size()!=0)
        {
            Pair T=deq.pollFirst();
            int x=T.x;
            int y=T.y;
            
            for(int i=0; i<4; i++)
            {
                int tx=x+vx[i];
                int ty=y+vy[i];
                if (tx < 0 || tx >= m || ty < 0 || ty >= n)
                    continue; // grid 배열 밖으로 벗어날 경우
                
                int c;
                if(i!=grid[x][y]-1)
                    c=1;
                else
                    c=0;
                
                if (arr[tx][ty] > arr[x][y] + c)
                {
                    arr[tx][ty] = arr[x][y] + c;
                    Pair tmp= new Pair(tx,ty);
                    if (c == 0)
                        deq.addFirst(tmp);
                    else
                        deq.addLast(tmp);
                }

            }

        }
        return arr[m - 1][n - 1];
        
    }
}
