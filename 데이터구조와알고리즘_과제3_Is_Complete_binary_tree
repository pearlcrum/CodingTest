class TreeNode:
    def __init__(self, data, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right
from my_ds import CircledQueue

def is_complete_binary_tree(root):
    if root==None:
        return True
    q=CircledQueue()
    q.enqueue(root)
    
    check_left=False
    check_right=False
    
    # left나 right node가 존재하지 않는 node가 나온 이후에 값이 있는 node가 나올 경우 false
    # 내 이전에 값이 존재하지 않는데, 내가 값이 존재할 경우를 생각해야 한다.
    while not q.is_empty():
        node=q.dequeue()
        if node.left !=None:
            if check_right==True: # node의 값이 존재하는데, 이미 앞선 곳에서 right node가 존재하지 않았던 경우
                return False # 내 직전의 right부터 이전까지 값이 존재하지 않았는데 node.left에 값이 존재하면 false
            q.enqueue(node.left)
        else:
            check_left=True #left node가 존재하지 않을 경우
            
        if node.right !=None:
            if check_left==True : # node의 값이 존재하는데, 이미 앞선 곳에서 left node가 존재하지 않았던 경우
                return False # 내 직전에 left부터 이전까지 값이 존재하지 않았는데 node.right에 값이 존재하면, false
            q.enqueue(node.right)
        else:
            check_right=True #right node 가 존재하지 않을 경우
    return True
