#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
#include <queue>
#include <stack>
using namespace std;

int n;
int arr[26][26];
bool visited[26][26];
int cnt = 0;
vector<int> vec;
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,-1,1,0 };
/*void dfs(int x, int y)
{
	cnt++;
	int dfsCount = 0;
	stack<pair<int, int>> st;
	st.push({ x,y });
	while (!st.empty())
	{
		int tx = st.top().first;
		int ty = st.top().second;
		st.pop();
		if (visited[tx][ty])
			continue;
		visited[tx][ty] = true;
		dfsCount++;
		for (int i = 0; i < 4; i++)
		{
			int bx = tx + vx[i];
			int by = ty + vy[i];
			if (bx < 0 || bx >= n || by < 0 || by >= n)
				continue;
			if (arr[bx][by] == 1 && visited[bx][by] == false)
			{
				st.push({ bx,by });
			}
		}
	}
	vec.push_back(dfsCount);
}*/
void bfs(int x, int y)
{
	cnt++;
	int bfsCount = 0;
	queue<pair<int, int>> q;
	q.push({ x,y });
	while (!q.empty())
	{
		int tx = q.front().first;
		int ty = q.front().second;
		q.pop();
		if (visited[tx][ty])
			continue;
		visited[tx][ty] = 1;
		bfsCount++;
		for (int i = 0; i < 4; i++)
		{
			int bx = tx + vx[i];
			int by = ty + vy[i];
			if (bx < 0 || bx >= n || by < 0 || by >= n)
				continue;
			if (arr[bx][by] == 1 && visited[bx][by] == false)
			{
				q.push({ bx,by });
			}
		}
	}
	vec.push_back(bfsCount);
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < n; j++)
		{
			if (s[j] - '0' == 0)
			{
				arr[i][j] = 0;
			}
			else
				arr[i][j] = 1;
		}
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (arr[i][j] == 1 && visited[i][j] == false)
			{
				bfs(i, j);
			}
		}
	}
	cout << cnt<<"\n";
	sort(vec.begin(), vec.end());
	for (int i = 0; i < vec.size(); i++)
	{
		cout << vec[i] << "\n";
	}

}
	
------------------------------------------------------------------------------------------------------------------------




#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
using namespace std;

int n;//입력
int input[26][26];
bool check[26][26];
int temp;
vector<int> ans;
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
void dfs(int x, int y)
{
	check[x][y] = 1;
	temp++;
	for (int i = 0; i < 4; i++)
	{
		int va = x + vx[i];
		int vb = y + vy[i];
		if (va<0 || va>n || vb<0 || vb>n)
		{
			continue;
		}
		if (input[va][vb] == 1 && !check[va][vb])
		{
			dfs(va, vb);
		}
	}
}
int main()
{
	cin.tie(0);
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < s.length(); j++)
		{
			input[i][j + 1] = s[j] - '0';
		}
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			if (input[i][j] == 1 && !check[i][j])
			{
				temp = 0;
				dfs(i, j);
				ans.push_back(temp);
			}
		}
	}
	sort(ans.begin(), ans.end());
	cout << ans.size() << "\n";
	for (int i = 0; i < ans.size(); i++)
	{
		cout << ans[i] << "\n";
	}
}
