#include <iostream>
#include<vector>
#include<math.h>
using namespace std;

int dp[1001][1001];
int solution(vector<vector<int>> board)
{
    int answer = board[0][0];
    
    for(int i=1; i<board.size();i++)
    {
        for(int j=1; j<board[i].size();j++)
        {
            if(board[i][j]==1)
            {
                board[i][j]=1+min(board[i-1][j],min(board[i][j-1],board[i-1][j-1]));
                answer=max(answer,board[i][j]);
            }
        }
    }

    return (int)pow(answer,2);
}

======================시간 초과 Brute Force====================
#include <iostream>
#include<vector>
#include<math.h>
#include<algorithm>
using namespace std;


vector<vector<int>> B;
int cnt=2;
bool check(int a, int b, int c)
{
    bool chk=true;
    for(int i=a;i<a+c;i++)
    {
        for(int j=b;j<b+c;j++)
        {
            if(B[i][j]==0)
            {
                chk=false;
                break;
            }
        }
        if(chk==false)
            break;
    }
    return chk;
}
int solution(vector<vector<int>> board)
{
    B=board;
    int answer=0;
    for(int i=0; i<board.size();i++)
    {
        for(int j=0; j<board[i].size();j++)
        {
            if(board[i][j]==1)
            {
                answer=max(answer,1);
                if(i+cnt>board.size() || j+cnt>board[0].size())
                    continue;
                while(check(i,j,cnt))
                {
                    answer=max(answer,(int)pow(cnt,2));
                    cnt++;
                    if(i+cnt>board.size() || j+cnt>board[0].size())
                        break;
                }
            }
        }
    }
    return answer;
}
