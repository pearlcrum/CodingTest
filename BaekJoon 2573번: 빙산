#include <string>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

int n, m;
int arr[301][301];
int arr2[301][301];
bool visited[301][301];
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
int cnt = 0;
void clearVisited()
{
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			visited[i][j] = false;
}
void bfs(int a,int b)
{
	queue<pair<int, int>> q;
	visited[a][b] = true;
	q.push({ a,b });
	while (!q.empty())
	{
		int nowX = q.front().first;
		int nowY = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++)
		{
			int nextX = nowX + vx[i];
			int nextY = nowY + vy[i];
			if (nextX < 1 || nextY < 1 || nextX >= n - 1 || nextY >= m - 1)
				continue;
			if (arr[nextX][nextY] > 0 && !visited[nextX][nextY])
			{
				visited[nextX][nextY] = true;
				q.push({ nextX,nextY });
			}
		}
	}
}
void changeArr()
{
	for (int i = 1; i < n - 1; i++)
	{
		for (int j = 1; j < m - 1; j++)
		{
			if (arr[i][j] > 0)
			{
				int cntTemp = 0;
				for (int k = 0; k < 4; k++)
				{
					int nextX = i + vx[k];
					int nextY = j + vy[k];
					if (nextX < 0 || nextY < 0 || nextX >= n || nextY >= m)
						continue;
					if (arr[nextX][nextY] == 0)
						cntTemp++;
				}
				arr2[i][j] = arr[i][j] - cntTemp;
				if (arr2[i][j] < 0)
					arr2[i][j] = 0;
			}
		}
	}
	for (int i = 1; i < n - 1; i++)
		for (int j = 1; j < m - 1; j++)
			arr[i][j] = arr2[i][j];
}
bool allMelt()
{
	bool check = true;
	for (int i = 1; i < n - 1; i++)
		for (int j = 1; j < m - 1; j++)
			if (arr[i][j] != 0)
				check = false;
	return check;
}
int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> arr[i][j];
	while (1)
	{
		bool check = false;
		check = allMelt();
		if (check == true)
		{
			cout << 0;
			break;
		}
		clearVisited();
		int res = 0;
		for (int i = 1; i < n - 1; i++)
			for (int j = 1; j < m - 1; j++)
				if (arr[i][j] > 0 && !visited[i][j])
				{
					bfs(i,j);
					res++;
				}
		
		if (res == 1)
		{
			cnt++;
			changeArr();
		}
		else
		{
			cout << cnt;
			break;
		}
	}
}
