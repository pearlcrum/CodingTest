#include <iostream>
#include <queue>
#include <algorithm>
#include <cstring>
using namespace std;

int arr[100001];
bool visited[100001];
int n, k;
int minimum=100001;
void bfs(int n)
{
	visited[n] = true;
	queue<pair<int, int>>q;
	q.push({ n, 0 });
	while (!q.empty())
	{
		int now = q.front().first;
		int count = q.front().second;
		q.pop();
		if (now == k)
		{
			minimum = min(minimum, count);
			while (!q.empty())
			{
				int now = q.front().first;
				int count = q.front().second;
				q.pop();
				if (now == k)
				{
					minimum = min(minimum, count);
				}
			}
			cout << minimum;
		}
		if (now*2<100001 && !visited[now * 2])
		{
			visited[now * 2]=true;
			q.push({ now * 2,count + 1 });
		}
		if (now + 1 < 100001 && !visited[now + 1])
		{
			visited[now + 1]=true;
			q.push({ now + 1,count + 1 });
		}
		if (now - 1 >= 0 && !visited[now - 1])
		{
			visited[now - 1] = true;
			q.push({ now - 1,count + 1 });
		}
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> k;
	bfs(n);
}
