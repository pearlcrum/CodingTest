#include <string>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int n;
int arr[105][105];
bool visited[105][105];
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,-1,1,0 };
int ans = 1000000000;
int c;
void clearVisit()
{
	for (int i = 0; i < 101; i++)
		for (int j = 0; j < 101; j++)
			visited[i][j] = false;
}
void bfs(int a, int b, int c)
{
	visited[a][b] = true;
	arr[a][b] = c;
	queue < pair<int, pair<int, int>>>q;
	q.push({ a,{b,0} });
	while (!q.empty())
	{
		int nowX = q.front().first;
		int nowY = q.front().second.first;
		int cnt = q.front().second.second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nextX = nowX + vx[i];
			int nextY = nowY + vy[i];
			if (nextX < 0 || nextY < 0 || nextX >= n || nextY >= n)
				continue;
			if (!visited[nextX][nextY] && arr[nextX][nextY] == 1)
			{
				visited[nextX][nextY] = true;
				q.push({ nextX,{nextY,cnt + 1} });
				arr[nextX][nextY] = c;
				
			}
		}

	}
}
int bfsV(int a, int b, int c)
{
	visited[a][b] = true;
	queue < pair<int, pair<int, int>>>q2;
	q2.push({ a,{b,0} });
	while (!q2.empty())
	{
		int nowX = q2.front().first;
		int nowY = q2.front().second.first;
		int cnt = q2.front().second.second;
		q2.pop();
		for (int i = 0; i < 4; i++)
		{
			int nextX = nowX + vx[i];
			int nextY = nowY + vy[i];
			if (nextX < 0 || nextY < 0 || nextX >= n || nextY >= n)
				continue;
			if (!visited[nextX][nextY] && arr[nextX][nextY] == c)
			{
				visited[nextX][nextY] = true;
				q2.push({ nextX,{nextY,cnt} });
			}
			else if (!visited[nextX][nextY] && arr[nextX][nextY] == 0)
			{
				visited[nextX][nextY] = true;
				q2.push({ nextX,{nextY,cnt + 1} });
			}
			else if (!visited[nextX][nextY] && arr[nextX][nextY] !=c)
			{
				while (!q2.empty())
					q2.pop();
				return cnt;
			}
		}

	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n;
	clearVisit();
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			cin >> arr[i][j];

	c = 2;
	for (int i = 0; i < n; i++) //bfs 이용 다른 덩어리로 만들어 준다.
	{
		for (int j = 0; j < n; j++)
		{
			if (arr[i][j] == 1 && !visited[i][j])
			{
				bfs(i, j, c); // 처음 1
				c++;
			}
		}
	}
	clearVisit();
	int all = c;
	c = 2;
	while (c <= all)
	{
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (arr[i][j] == c && !visited[i][j])
				{
					ans=min(ans,bfsV(i, j, c));
					clearVisit();
				}
			}
		}
		c++;
	}
	cout << ans;
	return 0;
}
