#include <string>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;

map<string,int> m;
string solution(vector<string> participant, vector<string> completion) {
    string answer;
    for(int i=0; i<participant.size();i++)
    {
        m[participant[i]]++;
    }
    for(int i=0; i<completion.size();i++)
    {
        m[completion[i]]--;
    }
    for(auto it=m.begin(); it!=m.end();it++)
    {
        if(it->second!=0){
            answer=it->first;
            break;
        }
    }
    return answer;
}






======================================================================

#include <string>
#include <vector>
#include <algorithm>

using namespace std;

string solution(vector<string> participant, vector<string> completion) {
    string answer;
    sort(participant.begin(),participant.end());
    sort(completion.begin(),completion.end());
    for(int i=0; i<participant.size();i++)
    {
        if(participant[i]!=completion[i])
        {
            return participant[i];
        }
    }
    return participant[participant.size()-1];
}




#### With out Hash
#include <string>
#include <vector>

using namespace std;

string solution(vector<string> participant, vector<string> completion) {
    string answer;
    for(int i=0; i<participant.size();i++)
    {
        for(int j=0; j<completion.size();j++)
        {
            if(participant[i]!="0")
            {
                if(participant[i]==completion[j])
                {
                    participant[i]="0";
                    completion[j]="0";
                    break;
                }
            }
        }
    }
    for(int i=0; i<participant.size();i++)
    {
        if(participant[i]!="0")
        {
            answer=participant[i];
            break;
        }
    }
    return answer;
}
