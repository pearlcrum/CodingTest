#include <string>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int n, m, k, x;
vector<vector<int>> vec(300001);
vector<int> ans;
int dist[300001];
void dijk(int n, int x, int k)
{
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	pq.push({ 0,x });
	dist[x] = 0;
	while (!pq.empty())
	{
		int cost = pq.top().first;
		int curIndex = pq.top().second;
		pq.pop();
		if (dist[curIndex] < cost)
			continue;
		for (int i = 0; i < vec[curIndex].size(); i++)
		{
			int nextCost = cost + 1;
			if (dist[vec[curIndex][i]] > nextCost)
			{
				dist[vec[curIndex][i]] = nextCost;
				pq.push({ nextCost,vec[curIndex][i] });
			}
		}
	}
	for (int i = 1; i <= n; i++)
	{
		if (dist[i] == k)
			ans.push_back(i);
	}

}
int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);
	cin >> n >> m >> k >> x;
	for (int i = 1; i <= n; i++)
	{
		dist[i] = 300001;
	}
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		vec[a].push_back(b);
	}
	dijk(n,x,k);
	if (ans.size() == 0)
		cout << -1;
	else
	{
		sort(ans.begin(), ans.end());
		for (int i = 0; i < ans.size(); i++)
		{
			cout << ans[i] << "\n";
		}
	}
	
}
