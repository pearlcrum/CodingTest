#include <string>
#include <iostream>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <math.h>
#include <map>
#define INF 987654321
using namespace std;

int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
int n, m;
char arr[101][101];
bool visited[101][101];
int bfs(int a, int b, char tmp)
{
	int ccnt = 0;
	visited[a][b] = true;
	queue < pair<int, int>> q;
	q.push({ a,b });
	while (!q.empty())
	{
		int nowX = q.front().first;
		int nowY = q.front().second;
		ccnt++;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nextX = nowX + vx[i];
			int nextY = nowY + vy[i];

			if (nextX < 0 || nextY < 0 || nextX >= n || nextY >= m)
				continue;
			if (arr[nextX][nextY] == tmp && !visited[nextX][nextY])
			{
				visited[nextX][nextY] = true;
				q.push({ nextX,nextY });
			}
		}
	}
	return ccnt;
}
int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);
	cin >> m>>n;
	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < m; j++)
		{
			arr[i][j] = s[j];
		}
	}
	int white = 0;
	int blue = 0;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (arr[i][j] == 'W'&& !visited[i][j])
			{
				white += (int)pow(bfs(i, j,arr[i][j]), 2);
			}
			else if (arr[i][j] == 'B' && !visited[i][j])
			{
				blue += (int)pow(bfs(i, j,arr[i][j]), 2);
			}
		}	
	}
	cout << white << " " << blue;
}
