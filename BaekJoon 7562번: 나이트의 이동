
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

int t, l;
bool visited[301][301];
int vx[8] = { -1,-2,-2,-1,1,2,2,1 };
int vy[8] = { -2,-1,1,2,2,1,-1,-2 };
int bfs(int startX, int startY, int destX, int destY, int l)
{
	queue<pair<int,pair<int,int>>> q;
	q.push({ startX,{startY,0} });
	visited[startX][startY] = true;
	while (!q.empty())
	{
		int tx = q.front().first;
		int ty = q.front().second.first;
		int cnt = q.front().second.second;
		q.pop();
		if (tx == destX && ty == destY)
			return cnt;
		for (int i = 0; i < 8; i++)
		{
			int bx = tx + vx[i];
			int by = ty + vy[i];
			if (bx < 0 || by < 0 || bx >= l || by >= l)
				continue;
			if (visited[bx][by] == false)
			{
				visited[bx][by] = true;
				q.push({ bx,{by,cnt + 1} });
			}
		}
	}

}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> t;
	for (int o = 0; o < t; o++)
	{
		cin >> l;
		for (int i = 0; i < l; i++)
		{
			for (int j = 0; j < l; j++)
			{
				visited[i][j] = false;
			}
		}
		int startX, startY;
		int destX, destY;
		cin >> startX >> startY;
		cin >> destX >> destY;
		int ans =bfs(startX, startY, destX, destY, l);
		cout << ans << "\n";
	}
}
	

-----------------------------------------------
#include <iostream>
#include <algorithm>
#include <queue>
#include <cstring>

using namespace std;
int arr[301][301];
bool check[301][301];
int k, l;
int a, b, c, d;
int minA;
int vx[8] = { 1,2,2,1,-1,-2,-2,-1 };
int vy[8] = { -2,-1,1,2,2,1,-1,-2 };
queue<pair<pair<int, int>, int>> q;
void bfs(int a, int b)
{
	minA = 2100000000;
	check[a][b] = 1;
	q.push({ { a,b }, 0 });
	while (!q.empty())
	{
		int ax = q.front().first.first;
		int by = q.front().first.second;
		check[ax][by] = 1;
		int cnt = q.front().second;
		q.pop();

		if (ax == c && by == d)
		{
			cout << cnt<<"\n";
			while (!q.empty())
			{
				q.pop();
			}
			break;
		}

		for (int i = 0; i < 8; i++)
		{
			int va = ax + vx[i];
			int vb = by + vy[i];

			if (va<0 || vb<0 || va>=l || vb>=l)
			{
				continue;
			}
			if (!check[va][vb])
			{
				check[va][vb] = 1;
				q.push({ {va,vb},cnt + 1 });
			}

		}
	}

}

int main()
{
	cin >> k;
	for (int i = 0; i < k; i++)
	{
		cin >> l;
		memset(arr, 0, sizeof(arr));
		memset(check, 0,sizeof(check));
		cin >> a >> b >> c >> d;
		bfs(a, b);
	}
}
