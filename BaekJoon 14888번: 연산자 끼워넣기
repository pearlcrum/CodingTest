#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#define INF 1000000001
using namespace std;

int n;
vector<int> vec;
int arith[4];
int visit[4];
int maxVal = -INF;
int minVal = INF;
void backtrack(int temp,int level)
{
	if (level == n)
	{
		if (temp > maxVal)
		{
			maxVal=temp;

		}
		if (temp < minVal)
		{
			minVal = temp;
		}
		return;
	}

	for (int j = 0; j < 4; j++)
	{
		if (arith[j] == 0)
		{
			continue;
		}
		if (arith[j] <= visit[j])
		{
			continue;
		}
		visit[j]++;
		if (j == 0)
		{
			backtrack(temp + vec[level] , level + 1);
		}
		else if (j == 1)
		{
			backtrack( temp - vec[level] , level + 1);
		}
		else if (j == 2)
		{
			backtrack(temp * vec[level], level + 1);

		}
		else if (j == 3)
		{
			backtrack(temp / vec[level], level + 1);
		}
		visit[j]--;
	}
	

}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		int a;
		cin >> a;
		vec.push_back(a);
	}
	for (int i = 0; i < 4; i++)
	{
		int a;
		cin >> a;
		arith[i] = a;
	}
	memset(visit, 0, sizeof(visit));
	backtrack(vec[0],1);
	cout << maxVal<<"\n";
	cout << minVal;
}
