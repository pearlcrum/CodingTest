#include <string>
#include <iostream>
#include <vector>
#include <algorithm>
#include <math.h>
#include <map>
#include <queue>
#include <cstring>
#define INF 987654321
using namespace std;

int n;
char arr[51][51];
char arr2[51][51];
bool visited[51][51];
int maxNum = 0;
int vx[4] = {1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
int countMax() // 행과 열의 내의 크기 최대 길이 구하는 함수.
{
	int ccnt = 0;
	int mMax = 0;
	int nMax = 0;
	for (int i = 0; i < n; i++)
	{
		ccnt = 1;
		for (int j = 0; j < n - 1; j++)
		{
			if (arr2[i][j] == arr2[i][j + 1])
			{
				ccnt++;
			}
			if (j == n - 2)
			{
				mMax = max(mMax, ccnt);
			}
			else if(arr2[i][j]!=arr2[i][j+1])
			{
				mMax = max(mMax, ccnt);
				ccnt = 1;
			}
		}
	}
	for (int j = 0; j < n; j++)
	{
		ccnt = 1;
		for (int i = 0; i < n - 1; i++)
		{
			if (arr2[i][j] == arr2[i + 1][j])
			{
				ccnt++;
			}
			if (i == n - 2)
			{
				nMax = max(nMax, ccnt);
			}
			else if(arr2[i][j]!=arr2[i+1][j])
			{
				nMax = max(nMax, ccnt);
				ccnt = 1;
			}
		}
	}
	return max(nMax, mMax);
}
void clearArr2()
{
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			arr2[i][j] = arr[i][j]; //배열 카피;

}
int check(int a, int b)
{
	visited[a][b] = true;
	clearArr2();
	int checkMaxNum = 0; 
	for (int i = 0; i < 4; i++)
	{
		int nextX = a + vx[i];
		int nextY = b + vy[i];
		if (nextX < 0 || nextY < 0 || nextX >= n || nextY >= n)
			continue;
		if (arr[a][b] != arr[nextX][nextY])
		{
			clearArr2();
			char temp = arr2[a][b];
			arr2[a][b] = arr2[nextX][nextY];
			arr2[nextX][nextY] = temp;
			int cnt=countMax(); //바꾼 것 개수 세기
			checkMaxNum = max(cnt, checkMaxNum);
		}
	}
	return checkMaxNum;
}

int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < s.size(); j++)
		{
			arr[i][j] = s[j];
		}
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			int cnt = check(i,j);
			maxNum = max(maxNum, cnt);
		}
	}
	cout << maxNum;

}

