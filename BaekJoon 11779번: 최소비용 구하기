#include <string>
#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
using namespace std;

int arr[1001][1001];
int ans[1001];
int route[1001];
vector<vector<int>> vec;
int n, m;
void dijk(int start, int end)
{

	for (int i = 1; i <= n; i++)
	{
		ans[i] = 1000000001;
	}
	priority_queue <pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
	ans[start] = 0;
	pq.push({ 0,start });
	while (!pq.empty())
	{
		int cost = pq.top().first;
		int curIndex = pq.top().second;

		pq.pop();
		if (cost > ans[curIndex])
			continue;
		for (int i = 1; i <= n; i++)
		{
			if (arr[curIndex][i] == 1000000001)
				continue;
			int nextCost = cost + arr[curIndex][i];
			if (nextCost < ans[i])
			{
				route[i] = curIndex;
				ans[i] = nextCost;
				pq.push({nextCost,i});
			}
		}
	}
	cout << ans[end]<<"\n";
	int temp = end;
	vector<int> res_route;
	while (temp)
	{
		res_route.push_back(temp);
		temp = route[temp];
	}
	cout << res_route.size() << "\n";
	for (int i = res_route.size() - 1; i >= 0; i--)
		cout<<res_route[i] << " ";
	cout << "\n";
}
int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
			arr[i][j] = 1000000001;
	}
	for (int i = 0; i < m; i++)
	{
		int a, b, c;
		cin >> a >> b >> c;
		if (arr[a][b] != 1000000001)
			arr[a][b] = min(arr[a][b], c);
		else
			arr[a][b] = c;
	}
	int start, end;
	cin >> start >> end;
	dijk(start,end);
}
