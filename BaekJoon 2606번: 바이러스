#include <string>
#include <iostream>
#include <vector>
#include <algorithm>
#include <math.h>
#include <map>
#include <queue>
#include <cstring>
#include <stack>
#define INF 987654321
using namespace std;

int n, m;
int arr[101][101];
bool visited[101];
int ans = 0;

void bfs(int start)
{
	queue<int> q;
	visited[start] = true;
	q.push(start);
	while (!q.empty())
	{
		int now = q.front();
		ans++;
		q.pop();
		for (int i = 1; i <= n; i++)
		{
			if (arr[now][i] == 1 && !visited[i])
			{
				visited[i] = true;
				q.push(i);
			}
		}
	}
}
int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		arr[a][b] = 1;
		arr[b][a] = 1;
	}
	bfs(1);
	cout << ans - 1;
}

===================================================

#include <iostream>

using namespace std;
int parent[101];
int n, m;
int countAns = 0;
int find(int x)
{
	if (parent[x] == x)
		return x;
	else
	{
		int temp = find(parent[x]);
		parent[x] = temp;
		return temp;
	}
}
void merge(int x, int y)
{
	x = find(x); 
	y = find(y);
	if (x != y)
		parent[y] = x;

}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
	{
		parent[i] = i;
	}
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		merge(a, b);
	}
	int res = find(1);
	for (int i = 2; i <= n; i++)
	{
		if (find(i) == res)
		{
			countAns++;
		}

	}
	cout << countAns;
}
----------------bfs를 이용한 풀이----------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
#include <queue>
#include <stack>
using namespace std;

int n, m;
int arr[101][101];
bool visited[101];
int bfs(int c)
{
	int cnt = -1;
	queue<int> q;
	q.push(1);
	while (!q.empty())
	{
		int a = q.front();
		q.pop();
		if (visited[a])
			continue;
		visited[a] = true;
		cnt++;
		for (int i = 1; i <= n; i++)
		{
			if (arr[a][i] == 1)
				q.push(i);
		}
	}
	return cnt;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		arr[a][b] = 1;
		arr[b][a] = 1;
	}
	int ans=bfs(1);
	cout << ans;
}


--------------------------------------------------------------------------------------------------------
#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

int adjacent[101][101];
bool visited[101];
int n, m;
queue<int> q;
int cnt;
void dfs(int v)
{
	q.push(v); //1 
	visited[v]=1;
	
	while (!q.empty())
	{
		int a = q.front();
		q.pop();
		
		for (int i = 1; i <= n; i++)
		{
			if (adjacent[a][i] && !visited[i]) 			// 12 15 23 56
			{											// 12 15 23
				visited[i] = 1;
				q.push(i);
				cnt++;
			}
		}
	}
}

int main()
{
	cin >> n >> m;
	for (int i = 1; i <= m; i++)
	{
		int a, b;
		cin >> a >> b;
		adjacent[a][b] = 1;
		adjacent[b][a] = 1;
	}
	dfs(1);
	cout << cnt;
}
