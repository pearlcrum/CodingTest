#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <cstring>
#include <queue>
using namespace std;

int n;
int arr[101][101];
bool visited[101][101];
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
int cnt = 0;
void bfs(int e,int w)
{
	queue<pair<int,pair<int, int>>> q;
	visited[e][w] = true;
	q.push({ e,{w,arr[e][w]} });
	cnt++;
	while (!q.empty())
	{
		int nowX = q.front().first;
		int nowY = q.front().second.first;
		int color = q.front().second.second;
		q.pop();
		bool chk = false;
		for (int i = 0; i < 4; i++)
		{
			int bx = nowX + vx[i];
			int by = nowY + vy[i];
			if (bx < 0 || by < 0 || bx >= n || by >= n)
				continue;
			if (arr[bx][by] == color && !visited[bx][by])
			{
				chk = true;
				visited[bx][by] = true;
				q.push({ bx,{by,color} });
			}
		}
	}
}
void rgb()
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			visited[i][j] = false;
		}
	}
	queue<pair<int, int>> q;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (arr[i][j] == 1)
				q.push({ i,j });
		}
	}
	while (!q.empty())
	{
		int tx = q.front().first;
		int ty = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++)
		{
			int bx = tx + vx[i];
			int by = ty + vy[i];
			if (bx < 0 || by < 0 || bx >= n || by >= n)
				continue;
			if (arr[bx][by] == 2)
			{
				arr[bx][by] = 1;
				q.push({ bx,by});
			}
		}
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < s.size(); j++)
		{
			if (s[j] == 'R')
				arr[i][j] = 1;
			else if (s[j] == 'G')
				arr[i][j] = 2;
			else
				arr[i][j] = 3;
		}
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (!visited[i][j])
				bfs(i,j);
		}
	}
	cout << cnt<<" ";
	cnt = 0;
	rgb();
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (!visited[i][j])
				bfs(i, j);
		}
	}
	cout << cnt;
}
	
