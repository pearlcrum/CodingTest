#include <iostream>
#include <queue>
#include <algorithm>
#include <utility>
#define Inf 100001

using namespace std;

int n, k;
queue<pair<int, int>> q;
bool check[Inf];
int min0=Inf;
int count0 = 0;
void bfs()
{
	q.push({ n,0 });
	while (!q.empty())
	{
		int now = q.front().first;
		int cnt = q.front().second;
		check[now] = 1;
		q.pop();

		if (now == k)
		{
			min0 = cnt;
			count0++;
			while (!q.empty())
			{
				int temp = q.front().first;
				int tw = q.front().second;
				if (temp == k && tw==min0)
				{
					count0++;
				}
				q.pop();
			}
			break;
		}
		else if (now >= 0 && now < Inf && now < k)
		{

			if (now * 2 < Inf && !check[now*2])
				q.push({2*now, cnt + 1 });

			if (!check[now + 1] && ((now + 1) < Inf))
				q.push({ now + 1,cnt + 1 });

			if (!check[now - 1] && ((now - 1) >= 0))
				q.push({ now - 1,cnt + 1 });
		}
		else if (now > k && now<Inf)
		{
			if (!check[now - 1] && ((now - 1) >= 0))
				q.push({ now - 1,cnt + 1 });
		}
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> k;
	bfs();
	cout << min0 << "\n";
	cout << count0;
}
