#include<iostream>
#include<algorithm>
#include<queue>
#define INF 100000000
using namespace std;
int n, m;
vector<pair<int, int>> arr[1001];
int dist[1001];
int s, e;
void dijk(int s)
{
	for (int i = 1; i <= n; i++)
	{
		dist[i] = INF;
	}
	dist[s] = 0;
	priority_queue<pair<int, int>,vector<pair<int,int>>, greater<pair<int,int>>> pq;
	pq.push({ 0,s });
	while (!pq.empty())
	{
		int current = pq.top().second;
		int cost = pq.top().first;//작은것 먼저 오도록 음수화
		pq.pop();
		if (cost>dist[current])
			continue;
		for (int i = 0; i <arr[current].size(); i++)
		{
			int next = arr[current][i].first;
			int next_cost = dist[current]+arr[current][i].second;

			if (next_cost < dist[next])
			{
				dist[next] = next_cost;
				pq.push({ next_cost,next });
			}
		}
	}
	cout << dist[e];
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		int a, b, c;
		cin >> a >> b >> c;
		arr[a].push_back({ b,c });
	}
	cin >> s >> e;
	//한 점에서 다른 한점 까지의 최소 길이 = 다익스트라
	dijk(s);
}
