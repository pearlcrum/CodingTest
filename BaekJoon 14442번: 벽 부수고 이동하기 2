#include <string>
#include <iostream>
#include <vector>
#include <algorithm>
#include <math.h>
#include <map>
#include <queue>
#include <cstring>
#define INF 987654321
using namespace std;

int n, m,k;
int arr[1001][1001];
bool visited[1001][1001][11];
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
void bfs(int a, int b)
{
	queue < pair<int, pair<int, pair<int,int>>>> q;
	visited[a][b][0] = true;
	q.push({ a,{b,{1,0}} });
	while (!q.empty())
	{
		int nowX = q.front().first;
		int nowY = q.front().second.first;
		int cnt = q.front().second.second.first;
		int wall = q.front().second.second.second;
		q.pop();
		if (nowX == n && nowY == m)
		{
			cout << cnt;
			return;
		}
		for (int i = 0; i < 4; i++)
		{
			int nextX = nowX + vx[i];
			int nextY = nowY + vy[i];
			if (nextX<1 || nextY<1 || nextX>n || nextY>m)
				continue;
			if (arr[nextX][nextY] == 0 && !visited[nextX][nextY][wall])
			{
				visited[nextX][nextY][wall] = true;
				q.push({ nextX,{nextY,{cnt + 1,wall}} });
			}
			if (arr[nextX][nextY] == 1 && wall + 1 <= k && !visited[nextX][nextY][wall + 1])
			{
				visited[nextX][nextY][wall + 1] = true;
				q.push({ nextX,{nextY,{cnt + 1,wall + 1}} });
			}
		}
	}
	cout << -1;
}
int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);
	cin >> n >> m>>k;
	for (int i = 1; i <= n; i++)
	{
		string s;
		cin >> s;
		for (int j = 0; j < s.size(); j++)
			arr[i][j + 1] = s[j] - '0';
	}
	bfs(1, 1);

}

