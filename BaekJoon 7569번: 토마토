#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

int n, m, k;
int vx[6] = { 1,0,-1,0,0,0 };
int vy[6] = { 0,1,0,-1,0,0 };
int vz[6] = { 0,0,0,0,1,-1 };
bool visited[101][101][101];
int arr[101][101][101];
int ans = 0;
bool show()
{
	for (int t = 0; t < k; t++)
	{
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				if (arr[i][j][t] == 0)
					return false;

			}
		}
	}
	return true;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> m >> n >> k;// x : n y:m z:k
	queue<pair<int, pair<int, pair<int, int>>>> q;
	for (int t = 0; t < k; t++)
		for (int i = 0; i < n; i++) //x
			for (int j = 0; j < m; j++) //y
			{
				cin >> arr[i][j][t];
				if (arr[i][j][t] == 1)
				{
					visited[i][j][t] = true;
					q.push({ i,{j,{t,0}} });
				}
			}



	while (!q.empty())
	{
		int tx = q.front().first;
		int ty = q.front().second.first;
		int tz = q.front().second.second.first;
		int cnt = q.front().second.second.second;
		q.pop();
		ans = max(ans, cnt);
		for (int i = 0; i < 6; i++)
		{
			int bx = tx + vx[i];
			int by = ty + vy[i];
			int bz = tz + vz[i];
			if (bx<0 || by<0 || bz<0 || bx>=n || by>=m || bz>=k)
				continue;
			if (arr[bx][by][bz] == 0 && !visited[bx][by][bz])
			{
				visited[bx][by][bz] = true;
				arr[bx][by][bz] = 1;
				q.push({ bx,{by,{bz,cnt + 1}} });
			}
		}
	}
	bool chk = show();
	if (chk == true)
		cout << ans;
	else
		cout << -1;


}
	
