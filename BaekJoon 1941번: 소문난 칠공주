#include <string>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
int vx[4] = { 1,0,0,-1 };
int vy[4] = { 0,1,-1,0 };
char arr[26];
bool visited[26];
bool visitedC[5][5];
int ans = 0;
void bfs()
{
	for (int i = 0; i < 5; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			visitedC[i][j] = false;
		}
	}
	int cnt = 0;
	queue<pair<int,int>> q;
	for (int i = 0; i < 25; i++)
	{
		if (visited[i])
		{
			q.push({ i / 5,i % 5 });
			visitedC[i / 5][i % 5] = true;
			cnt++;
			break;
		}
	}
	while (!q.empty())
	{
		int nowX = q.front().first;
		int nowY = q.front().second;
		q.pop();
		if (cnt == 7)
		{
			ans++;
			break;
		}
		for (int i = 0; i < 4; i++)
		{
			int nextX = nowX + vx[i];
			int nextY = nowY + vy[i];
			if (nextX < 0 || nextY < 0 || nextX >= 5 || nextY >= 5)
				continue;
			if (visited[nextX * 5 + nextY] && !visitedC[nextX][nextY])
			{
				visitedC[nextX][nextY] = true;
				q.push({ nextX,{nextY} });
				cnt++;
			}
		}
	}

}
void backtracking(int index, int s, int cnt)
{
	if (cnt == 7)
	{
		if (s >= 4)
		{
			//인접했는지 확인 들어간 값들이
			bfs();
		}
	}
	for (int i = index + 1; i <= 24; i++)
	{
		if (!visited[i])
		{
			visited[i] = true;
			if (arr[i] == 'S')
				backtracking(i, s + 1, cnt + 1);
			else
				backtracking(i, s, cnt + 1);
			visited[i] = false;
		}
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	for (int i = 0; i <25; i++)
	{
		char c; cin >> c;
		arr[i] = c;
	}

	//백트래킹으로 7개 씩 묶기
	backtracking(-1, 0, 0);
	cout << ans;
}
