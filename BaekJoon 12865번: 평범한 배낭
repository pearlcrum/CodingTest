#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int n, k;
vector<pair<int, int>>arr;
bool visited[101];
long long maxNum = -1;
int ans[100001];
void dfs(int weight, int value,int index)
{
	if (weight > k)
	{
		return;
	}
	if (weight <= k && maxNum < value)
	{
		maxNum = value;
	}
	for (int i = index; i < n; i++)
	{
		if (visited[i])
		{
			continue;
		}
		visited[i] = true;
		//weight += arr[i].first;// 이방식 이용하면 최적해 13 출력
		//value += arr[i].second;
		dfs(weight+arr[i].first, value+arr[i].second,i); 
		// 4 7 6 13 4 8 1 0 3 6 넣을시 최적해 14 출력
		visited[i] = false;
	}
}
void dp()
{
	for (int i = 0; i < n; i++)
	{
		for (int j = k; j >= 1; j--)
		{
			if (arr[i].first <= j)
			{
				ans[j] = max(ans[j], ans[j - arr[i].first] + arr[i].second);
			}
		}
	}
	cout << ans[k];
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> k;
	for (int i = 0; i < n; i++)
	{
		int w, v;
		cin >> w >> v;
		arr.push_back({ w,v });
	}
	dfs(0, 0,0);
	cout << "\n";
	cout << "dfs 풀이" << "\n";
	cout << maxNum<<"\n";
	cout << "dp 풀이" << "\n";
	dp();

}
