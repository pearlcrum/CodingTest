#include <stdio.h>
#include <iostream>
#include <sstream>
#include<math.h>
#include<algorithm>
#include<vector>
#include<cstring>
#include <string>
#include<map>
#include<stack>
#include<queue>
#include<deque>
#include<cstdio>
#include<functional>
#pragma warning(disable:4996)

using namespace std;

/*
- endl 대신 '\n' 사용하기
- cin.tie(0) 사용
- 테스트 케이스 있는 문제일 시 전역변수 초기화 신경쓰기
- (A + B + C) % D = ((A + B) % D + C) % D
- 문자열 출력 문제는 정답 문자열 복사해서 코드에 넣기
- 괄호 사용 유의하기
- 문자열은 함수로 넘길 때 const & 잘 사용하기

- 최악의 경우 int 값 초과하는지, 배열 인덱스 초과하는지 확인
- n 범위 확인 (0인 경우), 양수음수 정수소수 확인, 불가케이스 -1 출력 등 확인
- 큰 배열 선언 시 전역선언, 테케 많을 시 초기화, 배열 용량 max N + 5
*/
//DFS 장점: 현 경로상의 노드를 기억하기 때문에 적은 메모리를 사용한다.
//DFS 장점: 찾으려는 노드가 깊은 단계에 있는 경우 BFS보다 빠르게 찾을 수 있다.
//DFS 단점: 해가 없는 경로를 탐색할 경우 단게가 끝날때까지 탐색한다. 최단 경로라는 보장이 존재하지 않는다.
//BFS 장점: 답이 되는 경로가 여러 개인 경우에도 최단경로임을 보장한다.
//BFS 장점: 최단 경로가 존재하면 깊이가 무한적으로 깊어져도 답을 찾을 수 있다.
//BFS 닩점: 경로가 길 경우에는 많은 기억 공간을 필요하게 되나.

int n, m, v;
int adjacent[1001][1001];
bool visited[1001];
queue<int> q;
void dfs(int v)
{
	visited[v] = 1;//방문했으니
	cout << v << " ";
	for (int i = 1; i <= n; i++)
	{
		if (adjacent[v][i] && !visited[i])
		{
			visited[i];
			dfs(i);
		}
	}
}
void bfs(int v)
{
	q.push(v);
	visited[v] = 1;

	while (!q.empty())
	{
		v = q.front();
		q.pop();

		cout << v << " ";

		for (int i = 1; i <= n; i++)
		{
			if (adjacent[v][i] && !visited[i])
			{
				visited[i] = 1;
				q.push(i);
			}
		}
	}

}
int main()
{
	
	cin.tie(0);
	
	cin >> n >> m >> v;
	for (int i = 1; i <= m; i++)
	{
		int a, b;
		cin >> a >> b;
		adjacent[a][b] = 1;
		adjacent[b][a] = 1;
	}

	dfs(v);
	cout << "\n";
	memset(visited, false, sizeof(visited));
	bfs(v);
}

