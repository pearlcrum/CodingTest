#include <stdio.h>
#include <iostream>
#include <sstream>
#include<math.h>
#include<algorithm>
#include<vector>
#include<cstring>
#include <string>
#include<map>
#include<stack>
#include<queue>
#pragma warning(disable:4996)
using namespace std;

/*
- endl 대신 '\n' 사용하기
- cin.tie(0) 사용
- 테스트 케이스 있는 문제일 시 전역변수 초기화 신경쓰기
- (A + B + C) % D = ((A + B) % D + C) % D
- 문자열 출력 문제는 정답 문자열 복사해서 코드에 넣기
- 괄호 사용 유의하기
- 문자열은 함수로 넘길 때 const & 잘 사용하기

- 최악의 경우 int 값 초과하는지, 배열 인덱스 초과하는지 확인
- n 범위 확인 (0인 경우), 양수음수 정수소수 확인, 불가케이스 -1 출력 등 확인
- 큰 배열 선언 시 전역선언, 테케 많을 시 초기화, 배열 용량 max N + 5
*/
long long ans[1001];
int main()
{
	
	cin.tie(0);
	int a;
	cin >> a;
	vector<int> path;
	vector<int> oilsmall;
	vector<int> oil;
	path.push_back(0);
	oil.push_back(0);
	oilsmall.push_back(0);
	for (int i = 1; i <= a - 1; i++)
	{
		int c;
		cin >> c;
		path.push_back(c);
	}
	for (int i = 1; i <= a; i++)
	{
		int c;
		cin >> c;
		oil.push_back(c);
		oilsmall.push_back(c);
	}
	sort(oilsmall.begin(), oilsmall.end() - 1);

	
	long long  ans = 0;
	long long min = 1000000000;
	for (int i = 1; i < oil.size(); i++) //오일의 크기 만큼 반복한다.
	{
		if (oil[i] == oilsmall[1])//가는 곳 중 가장 기름이 쌀 때
		{
			//남은 필요한 기름을 다 미리 사두면 된다.
			long long temp = 0;
			for (int j = i; j < path.size(); j++)
			{
				temp = temp + path[j];//남은 총 길이
			}
			ans = ans + oilsmall[1]*temp;//남은 총 길이 x 가격
			break;
		}
		else
		{
			if (oil[i] < min)
			{
				min = oil[i]; //현재 값을 min에 넣는다.
				long long tmp;
				for (int j = i+1; j < oil.size(); j++)
				{
					if (min > oil[j])// 내 값이 최소는 아니지만 a보다는 싼 경우
					{
						tmp = j;// j에서는 나보다 더 싸게 살 수 있다.
						break;
					}
				}
				long long temp = 0;
				for (int k = i; k < tmp; k++)
				{
					temp = temp + path[k];
				}
				ans = ans + min * temp;
				i = tmp - 1;
			}
		}
	}
	cout << ans;


}

