#include <string>
#include <iostream>
#include <algorithm>
#include <queue>
#include <stack>
#include <math.h>
#include <map>
#include <set>
using namespace std;

int n;
int arr[11][11];
bool visited[11];
int startnode;
int minRes = 1000000000;

void dfs(int node, int val, int cnt)
{
	if (cnt == n)
	{
		if (arr[node][startnode] != 0)
		{
			minRes = min(minRes, val + arr[node][startnode]);
			return;
		}
	}
	for (int i = 1; i <= n; i++)
	{
		if (arr[node][i] != 0 && !visited[i])
		{
			visited[i] = true;
			dfs(i, val + arr[node][i], cnt + 1);
			visited[i] = false;
		}
	}
}
int main()
{
	cin.tie(0);
	ios::sync_with_stdio(false);
	cin >> n;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
			cin >> arr[i][j];
	}
	for (int i = 1; i <= n; i++)
	{
		startnode = i;
		visited[i] = true;
		dfs(i, 0, 1);
		visited[i] = false;
	}
	
	cout << minRes;
}
---------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <stack>
#include <cstring>
#include <queue>
using namespace std;

int answer = 90000000;

void dfs(int n, int c, int s, int from, int w[][10], int v[]) {
    if (c == n - 1) {
        if (w[from][0] != 0 && answer > s + w[from][0])
            answer = s + w[from][0];
    }

    else {
        for (int i = 1; i < n; i++) {
            if (v[i] == 0 && w[from][i] != 0) {
                v[i] = 1;
                dfs(n, c + 1, s + w[from][i], i, w, v);
                v[i] = 0;
            }
        }
    }
}
int main() {
    int n, w[10][10], v[10] = { 0 };
    cin >> n;
    for (int i = 0; i < n; i++)    
        for (int j = 0; j < n; j++)    
            cin >> w[i][j];
    for (int i = 1; i < n; i++) {
        if (w[0][i] != 0) {
            v[i] = 1;
            dfs(n, 1, w[0][i], i, w, v);
            v[i] = 0;
        }
    }
    cout << answer;
}
