#include <iostream>
#include <queue>
#include <cstring>
using namespace std;

int vx[4] = { 1,0,-1,0 };
int vy[4] = {0,-1,0,1};
int arr[1001][1001];
bool visited[1001][1001];
int n, m;
int count = 0;
void bfs(int x, int y, int count)
{
	queue<pair<int, pair<int, int>>> q;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			if (arr[i][j] == 1) // 1인 것들 찾아서 넣는다.
			{
				visited[i][j] = true;
				q.push({ i,{j,0} });
			}
			if (arr[i][j] == -1)
			{
				visited[i][j] = true;
			}
		}
	}
	while (!q.empty())
	{
		int tempx = q.front().first;
		int tempy = q.front().second.first;
		int cnt = q.front().second.second;
		count = max(count, cnt);
		q.pop();
		for (int i = 0; i < 4; i++)
		{
			int tx = tempx + vx[i];
			int ty = tempy + vy[i];
			if (tx < 1 || tx>n || ty<1 || ty>m)
				continue;
			if (visited[tx][ty])
				continue;
			if (arr[tx][ty] == 0)
			{
				visited[tx][ty] = true;
				q.push({ tx,{ty,cnt + 1} });
			}
		}
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			if (arr[i][j] == 0 && visited[i][j] == false)
			{
				cout << -1;
				return;
			}
		}
	}
	cout << count;
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> m >> n;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			cin >> arr[i][j];
		}
	}
	bfs(1,1,0);
}
