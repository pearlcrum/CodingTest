#include <string>
#include <iostream>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int n, m;
int arr[9];
bool visited[9];
void back(int i, int cnt)
{
	if (cnt == m)
	{
		for (int i = 1; i <= cnt; i++)
		{
			cout << arr[i] << " ";
		}
		cout << "\n";
		return;
	}
	for (int j = i + 1; j <= n; j++)
	{
		visited[j] = true;
		arr[cnt+1] = j;
		back(j, cnt + 1);
		visited[j] = false;
	}
}
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m;
	for (int i = 1; i <= n; i++)
	{
		visited[i] = true;
		arr[1] = i;
		back(i, 1);
		visited[i] = false;

	}

}
==============================================
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int n, m;
int arr[9];
bool check[9];
void backtracking(int level,int last) //level 과 앞 글자를 가지고 온다.
{
	if (m == level)
	{
		for (int i = 0; i < m; i++)
		{
			cout<<arr[i] << " ";
		}
		cout << "\n";
		return;
	}

	for (int i = last; i <= n; i++)//이전 값 보다 커야 하니 i=last
	{
		if (check[i])//방문한 적이 있다면
		{
			continue;
		}
		check[i] = true;
		arr[level] = i;
		backtracking(level + 1, i);
		check[i] = false;
	}
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n >> m;
	backtracking(0,1);//최소 시작 값이 1이므로 last에 1을 넣어준다.
}
